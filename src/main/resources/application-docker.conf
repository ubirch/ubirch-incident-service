include "application.base.conf"

incidentService {

  threadPoolSize = ${INCIDENT_ENV_THREAD_POOL_SIZE}

  kafkaApi {

    kafkaConsumer {
      //colon-separated values of IP/Hostname and ports
      bootstrapServers = ${INCIDENT_ENV_KAFKA_CONS_BOOTSTRAP}

      //topics
      niomonErrorTopic = ${INCIDENT_ENV_KAFKA_CONS_NIOMON_ERROR_TOPIC}
      eventlogErrorTopic = ${INCIDENT_ENV_KAFKA_CONS_EVENTLOG_ERROR_TOPIC}

      //further config
      fetchMaxBytes = ${INCIDENT_ENV_KAFKA_CONS_FETCH_MAX_BYTES}
      gracefulTimeout = ${INCIDENT_ENV_KAFKA_CONS_GRACEFUL_TIMEOUT}
      groupId = ${INCIDENT_ENV_KAFKA_CONS_GROUPID}
      maxPartitionFetchBytes = ${INCIDENT_ENV_KAFKA_CONS_MAX_PARTITION_FETCH_BYTES}
      maxPoolRecords = ${INCIDENT_ENV_KAFKA_CONS_MAX_POOLREC}
      maxTimeAggregationSeconds = ${INCIDENT_ENV_KAFKA_MAX_TIME_AGG_SECONDS}
      reconnectBackoffMsConfig = ${INCIDENT_ENV_KAFKA_CONS_RECONNECT_BACKOFF_MS}
      reconnectBackoffMaxMsConfig = ${INCIDENT_ENV_KAFKA_CONS_RECONNECT_BACKOFF_MAX_MS}
    }

    //    kafkaProducer {
    //      bootstrapServers = ${INCIDENT_ENV_KAFKA_PROD_BOOTSTRAP}
    //      lingerMS = ${INCIDENT_ENV_KAFKA_PROD_LINGERMS}
    //      errorTopic = ${INCIDENT_ENV_KAFKA_PROD_ERRORTOPIC}
    //      gracefulTimeout = ${INCIDENT_ENV_KAFKA_PROD_TIMEOUT}
    //    }
  }

  metrics {
    prometheus {
      port = ${INCIDENT_ENV_METRICS_PROMETHEUS_PORT}
    }
  }

  tenantRetriever {
    thingApiUrl = ${INCIDENT_ENV_THING_API_URL}
    deviceCacheName = ${INCIDENT_ENV_DEVICE_CACHE_NAME}
    ttl = ${INCIDENT_ENV_DEVICE_CACHE_TTL_MIN}
  }

  mqttDistributor {
    brokerUrl = ${INCIDENT_ENV_MQTT_BROKER_URL}
    clientId = ${INCIDENT_ENV_MQTT_CLIENT_ID}
    userName = ${INCIDENT_ENV_MQTT_USER_NAME}
    password = ${INCIDENT_ENV_MQTT_PASSWORD}
    qualityOfService = ${INCIDENT_ENV_MQTT_QUALITY_OF_SERVICE}
    queuePrefix = ${INCIDENT_ENV_MQTT_QUEUE_PREFIX}
    maxInflightMessages = ${INCIDENT_ENV_MQTT_MESSAGES_INFLIGHT}
  }


}


redis {
  #check for further config values: https://github.com/Livestream/scredis/wiki/Configuration

  # Redis server address
  host = ${INCIDENT_ENV_REDIS_HOST}
  # Redis server port
  port = ${INCIDENT_ENV_REDIS_PORT}

  # Redis server password (optional)
  password = ${INCIDENT_ENV_REDIS_PASSWORD}

  # Database to be selected when connection is established
  database = 0

  # Name of this connection (optional). Setting this parameter will have the client send a
  # CLIENT SETNAME (available since 2.6.9) command just after having established the connection
  #  name = "incident-service-cache"
}

