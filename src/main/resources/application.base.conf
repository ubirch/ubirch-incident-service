
incidentService {

  name = "ubirch-incident-service"
  threadPoolSize = 20

  kafkaApi {

    kafkaConsumer {
      //colon-separated values of IP/Hostname and ports
      bootstrapServers = "localhost:9092"
      fetchMaxBytes = 52428800
      gracefulTimeout = 2 //in seconds
      groupId = "incident-service-group"
      niomonErrorTopic = "ubirch-niomon-error-json"
      eventlogErrorTopic = "ubirch-eventlog-error-json"
      maxPartitionFetchBytes = 1048576
      maxPollRecords = 1000
      maxTimeAggregationSeconds = 120
      metricsSubNamespace = ${incidentService.name}
      prefix = "ubirch"
      reconnectBackoffMsConfig = 50
      reconnectBackoffMaxMsConfig = 1000
    }

    //    kafkaProducer {
    //      //colon-separated values of IP/Hostname and ports
    //      bootstrapServers = "localhost:9092"
    //      lingerMS = 1000
    //      errorTopic = "incident.error"
    //      publishTopicPrefix = "incident_"
    //    }

  }

  metrics {
    prometheus {
      port = 4321
      //      namespace = "ubirch_filter_service"
    }
  }

  tenantRetriever {
    thingApiUrl = "www.unneededURL.de"
    deviceCacheName = "incident-device-cache"
    ttl = "5" //in minutes
  }

  mqttDistributor {
    brokerUrl = "not needed for tests"
    brokerUrl = ${?MQTT_BROKER}
    clientId = ${incidentService.name}
    userName = ""
    userName = ${?MQTT_USER_NAME}
    password = ""
    password = ${?MQTT_PASSWORD}
    qualityOfService = 1 // at least once
    queuePrefix = "ubirch/incidents/"
  }
}

redisson {
  main {
    singleServerConfig {
      address = "redis://localhost:6379"
      clientName = "incident-service-cache"
    }
  }
  fallbacks = []
}